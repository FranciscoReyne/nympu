Vamos a medir el rendimiento de dos formas de hacer una suma: una usando el m√©todo tradicional y otra usando una cach√© precargada. Aqu√≠ tienes un peque√±o ejemplo con `timeit`:

```python
import timeit

# Crear cache con sumas precalculadas
sum_cache = {(i, j): i + j for i in range(-1000, 1001) for j in range(-1000, 1001)}

def suma_cach√©(a, b):
    return sum_cache.get((a, b), a + b)

def suma_normal(a, b):
    return a + b

# Prueba de rendimiento
veces = 1_000_000
resultado_normal = timeit.timeit('suma_normal(123, 456)', globals=globals(), number=veces)
resultado_cache = timeit.timeit('suma_cach√©(123, 456)', globals=globals(), number=veces)

print(f"Suma normal: {resultado_normal:.6f} segundos")
print(f"Suma con cach√©: {resultado_cache:.6f} segundos")
```

Este c√≥digo prueba un mill√≥n de veces ambas funciones. Lo puedes ajustar a tu necesidad (por ejemplo, probar con otros n√∫meros o aumentar el rango de la cach√©).

üí° **¬øQu√© esperar?**  
La funci√≥n con cach√© puede ser m√°s r√°pida si se repiten muchas veces las mismas sumas, pero para una suma tan simple como `a + b`, la diferencia puede ser muy peque√±a o incluso nula en algunos casos. Sin embargo, esta t√©cnica **cobra m√°s valor** cuando el c√°lculo subyacente es m√°s complejo (por ejemplo, funciones costosas o llamadas a APIs).
